mixin pictureJpg(filename, width, height, altText, cssClass, lazy, breakpoints= [1200, 1700])
  picture
    source(media=`(min-width: ${breakpoints[1]}px)`, srcset= `./img/${filename}-d@1x.jpeg 1x, ./img/${filename}-d@2x.jpeg 2x`)
    source(media=`(min-width: ${breakpoints[0]}px)`, srcset= `./img/${filename}-sd@1x.jpeg 1x, ./img/${filename}-sd@2x.jpeg 2x`)
    img(class= cssClass, src= `./img/${filename}-m@1x.jpeg`, srcset=`./img/${filename}-m@2x.jpeg 2x`, width= width, height= height, alt= altText, loading= lazy)

mixin pictureJpgWebp(filename, width, height, altText, cssClass, lazy)
  picture
    source(type="image/webp", srcset= `./img/${filename}@1x.webp 1x,./img/${filename}@2x.webp 2x`)
    img(class= cssClass, src= `./img/${filename}@1x.jpeg`, srcset=`./img/${filename}@2x.jpeg 2x`, width=width, height=height, alt= altText, loading=lazy)

mixin pictureJpgWebpM(filename, width, height, altText, cssClass, lazy, breakpoints= [1200, 1700])
  picture
    source(media=`(min-width: ${breakpoints[1]}px)`, type="image/webp", srcset= `./img/${filename}-d@1x.webp 1x,./img/${filename}-d@2x.webp 2x`)
    source(media=`(min-width: ${breakpoints[0]}px)`, type="image/webp", srcset= `./img/${filename}-sd@1x.webp 1x,./img/${filename}-sd@2x.webp 2x`)
    source(type="image/webp", srcset= `./img/${filename}-m@1x.webp 1x,./img/${filename}-m@2x.webp 2x`)
    source(media=`(min-width: ${breakpoints[1]}px)`, srcset= `./img/${filename}-d@1x.jpeg 1x, ./img/${filename}-d@2x.jpeg 2x`)
    source(media=`(min-width: ${breakpoints[0]}px)`, srcset= `./img/${filename}-sd@1x.jpeg 1x, ./img/${filename}-sd@2x.jpeg 2x`)
    img(class= cssClass, src= `./img/${filename}-m@1x.jpeg`, srcset=`./img/${filename}-m@2x.jpeg 2x`, width= width, height= height, alt= altText, loading= lazy)

mixin picturePngWebp(filename, width, height, altText, cssClass, lazy)
  picture
    source(type="image/webp", srcset= `./img/${filename}@1x.webp 1x,./img/${filename}@2x.webp 2x`)
    img(class= cssClass, src= `./img/${filename}@1x.png`, srcset=`./img/${filename}@2x.png 2x`, width=width, height=height, alt= altText, loading=lazy)

mixin simpleButton(text, additionalClassesArray, href)
  - const cssClass = 'button ' + additionalClassesArray.join(' ');
  - const linkHref = href ? href : '#';
  a(class= cssClass, href= linkHref)= text

mixin formInput({ inputName, inputId, inputType, placeholder, label, cols, rows, optionsArray, isRequired, isHidden, isReadonly })
  -
    const inputAttributesObj = {}
    if (isRequired) { inputAttributesObj.required = "required"}
    if (isHidden) { inputAttributesObj.hidden = "hidden"}
    if (isReadonly) { inputAttributesObj.readonly = "readonly"}
  if isHidden !== true
    label.visuallyhidden(for= inputId)= label
  if inputType === 'textarea'
    textarea(id= inputId, name= inputName, cols= cols, rows= rows, placeholder= placeholder)&attributes(inputAttributesObj)&attributes(attributes)
  else if inputType === 'select'
    select(id= inputId, name= inputName)&attributes(inputAttributesObj)&attributes(attributes)
      option(label= placeholder)
      each optionItem in optionsArray
        option= optionItem
  else if inputType === 'file'
    label= label
      input(id= inputId, type= inputType, name= inputName)&attributes(inputAttributesObj)&attributes(attributes)
  else
    input(id= inputId, type= inputType, name= inputName, placeholder= placeholder)&attributes(inputAttributesObj)&attributes(attributes)

mixin inlineLink(cssClass, linkHref="https://domycompany.ru/", linkText=" domycompany.ru")
  |
  |
  a(class=cssClass, href=linkHref)= linkText
